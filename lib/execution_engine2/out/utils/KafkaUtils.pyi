from typing import Any, Optional, Type

STATUS_EVENT_TYPE: str
CONDOR_EVENT_TYPE: str
VALID_CONDOR_COMMANDS: Any
EVENT_TYPES: Any
DEFAULT_TOPIC: str
TOPICS: Any

class StatusRequired:
    job_id: str
    previous_status: str
    new_status: str
    scheduler_id: int
    def __post_init__(self) -> None: ...
    def __init__(self, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any) -> None: ...

class StatusOptional:
    topic: str = ...
    event_type: str = ...
    error: bool = ...
    def __post_init__(self) -> None: ...
    def __init__(self, topic: Any, event_type: Any, error: Any) -> None: ...

class ErrorOptional:
    error_code: Optional[int]
    error_message: Optional[str]
    def check_for_error(self, new_status: Any) -> None: ...
    def __init__(self, error_code: Any, error_message: Any) -> None: ...

class KafkaFinishJob(StatusOptional, ErrorOptional, StatusRequired):
    def __post_init__(self) -> None: ...
    def __init__(self, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any, error_code: Any, error_message: Any, topic: Any, event_type: Any, error: Any) -> None: ...

class CondorRequired:
    condor_command: str
    job_id: str
    scheduler_id: float
    def __post_init__(self) -> None: ...
    def __init__(self, condor_command: Any, job_id: Any, scheduler_id: Any) -> None: ...

class CondorOptional:
    event_type: str = ...
    def __init__(self, event_type: Any) -> None: ...

class CancelJobRequired:
    terminated_code: int
    def __init__(self, terminated_code: Any) -> None: ...

class KafkaCancelJob(StatusOptional, StatusRequired, CancelJobRequired):
    status_change: Any = ...
    def __post_init__(self) -> None: ...
    def __init__(self, terminated_code: Any, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any, topic: Any, event_type: Any, error: Any) -> None: ...

class KafkaStatusChange(StatusOptional, StatusRequired):
    def __init__(self, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any, topic: Any, event_type: Any, error: Any) -> None: ...

class KafkaQueueChange(StatusOptional, StatusRequired):
    status_change: Any = ...
    def __post_init__(self) -> None: ...
    def __init__(self, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any, topic: Any, event_type: Any, error: Any) -> None: ...

class KafkaCondorCommand(CondorOptional, CondorRequired):
    def __init__(self, condor_command: Any, job_id: Any, scheduler_id: Any, event_type: Any) -> None: ...

class UserRequired:
    user: str
    def __init__(self, user: Any) -> None: ...

class KafkaCreateJob(UserRequired):
    job_id: str
    status_change: Any = ...
    def __post_init__(self) -> None: ...
    def __init__(self, user: Any, job_id: Any) -> None: ...

class KafkaStartJob(StatusOptional, StatusRequired):
    def __post_init__(self) -> None: ...
    def __init__(self, job_id: Any, previous_status: Any, new_status: Any, scheduler_id: Any, topic: Any, event_type: Any, error: Any) -> None: ...

class KafkaClient:
    server_address: Any = ...
    def __init__(self, server_address: Any) -> None: ...
    def send_kafka_message(self, message: Type, topic: str=...) -> Any: ...
